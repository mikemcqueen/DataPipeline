

figure out the Class[] hack in DP::Message.
string_view Class param?

g_pDisplay

static charsets in DcrTrades_t.
overall, clean up Dcr* of charset cruft

DcrWindow.cpp, remove inline code from .h

widget IDs as empty enum class + constexpr + MakeId
review some of the enable_if/concepts ideas for restricting MakeId to specific 
types (WindowId_t, WidgetId_t, EventId_t, etc.)
	maybe i can use typeid(T) == typeid(type1) || typeid(type2) etc.
	probably need to use a magic value in the scoped enum to enable this.

TableWindow should not inherit from TabWindow. A window *has a* a table,
not *is a* table.

I think the word transaction is wrong. State would also be wrong. This is a container
for a set of states really.  or a container for a state machine?

Move TableInfo_t.h to DcrLib. DcrTableTypes?

Ui::Window:
  --can be moved elsewhere:
  * anything that takes a CSurface, maybe? New derived type: Virtual_t, parallel
    type of WithHandle_t, emphasizing "CSurface-based" recognition.

BrokerWindow::IsTabWindow shit. goes.

saw weird "out of pool items (71)" error.  71?  WTF? I know tesseract is slow but jeez.

Probably want TiBroker* to do some text massaging. that means a co-routine-loop sourced
synchronous screenshot will want to "translate" then "interpret". and there will probably
be some commonality between TiBrokerBuy, TiBrokerSell. price text for example

broker_sell2.bmp:
BrokerSell::ValidateClient(): Line (0) @ (218, 297) doesn't match

SetLastOrigin is not being called consistently for all window types?
Ui::WindowId_t WindowType_t::LastOriginMatchAll is broken if we have more than 1 window_ids
Window::Base_t optional<POINT> last origin?
Unique_ptr<CSurface> in all windows (for all bmps)
	
c++20: * == done(ish)
	range_for (as_const? or just const auto) whereever const_iterator is defined. read up on as_const vs. const auto
	public + delete instead of private copy/assignment/move
	enum class
	constexpr
		static const -> constexpr (generally)
	typedef -> using
	char* param -> string_view
	bool get(Struct* pResult) -> optional<Struct> get()
